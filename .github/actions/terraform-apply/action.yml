name: 'Terraform setup and plan'
description: 'Setup Terraform and creates plan'
inputs:
  terraform_directory:
    description: 'Directory that holds Terraform code'
    default: 'terraform'
  terraform_sa:
    description: 'GCP service account used for Terraform actions'
    required: true
  terraform_version:
    description: 'Terraform Version'
    default: 1.8.2
  github_token:
    description: 'GitHub token for auth'
    required: true
  pr_id:
    description: 'Pull request ID'
    required: true
  gcp_workload_identity_provider:
    description: 'GCP Workload Identity Provider'
    required: true
  gcp_project_id:
    description: 'GCP Project ID'
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraforom_version }}
        terraform_wrapper: false

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        service_account: ${{ inputs.terraform_sa }}
        create_credentials_file: true
        workload_identity_provider: ${{ inputs.gcp_workload_identity_provider }}
        project_id: ${{ inputs.gcp_project_id }}

    - name: 'Set up Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: Generate Backend Config
      id: backend-config
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        #!/bin/bash
        
        
        cat <<EOL > backend.tf
        terraform {
          backend "gcs" {
            bucket = "${{ inputs.gcp_project_id }}-terraform-state"
            prefix  = "demo-resource-scaffolding"
          }
        }
        EOL
        
        terraform fmt backend.tf

        echo "backend.tf generated successfully."

    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        terraform init

    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: terraform plan -no-color -out=tf.plan

    - name: Terraform Apply
      id: apply
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: terraform apply -input=false -no-color tf.plan
