name: Deploy cloud run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      deployment_name: ${{ steps.generate.outputs.deployment_name }}
      service_name: ${{ steps.generate.outputs.service_name }}
      cloud_run_cpu_limits: ${{ steps.generate.outputs.cloud_run_cpu_limits }}
      cloud_run_memory_limits: ${{ steps.generate.outputs.cloud_run_memory_limits }}
      cloud_run_max_instances: ${{ steps.generate.outputs.cloud_run_max_instances }}
      cloud_run_concurrency: ${{ steps.generate.outputs.cloud_run_concurrency }}
      cloud_run_env: ${{ steps.generate.outputs.cloud_run_env }}
      cloud_run_secret_env: ${{ steps.generate.outputs.cloud_run_secret_env }}
      gcp_region: ${{ steps.generate.outputs.gcp_region }}

    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set input value based on event type
        id: set-input
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "environment=staging" >> $GITHUB_ENV
          else
            echo "environment=prod" >> $GITHUB_ENV
          fi

      - name: Run infra-generator action
        id: generate
        uses: ./.github/actions/infra-generator
        with:
          environment: ${{ env.environment }}
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run terraform plan
        if: github.event_name == 'pull_request'
        id: terraform-plan
        uses: ./.github/actions/terraform-plan
        with:
          terraform_sa: ${{ secrets.GCP_WIF_SA }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_id: ${{ github.event.pull_request.number }}
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          gcp_workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}

      - name: Run terraform apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: terraform-apply
        uses: ./.github/actions/terraform-apply
        with:
          terraform_sa: ${{ secrets.GCP_WIF_SA }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_id: ${{ github.event.pull_request.number }}
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          gcp_workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}

  build_docker:
    runs-on: ubuntu-latest
    needs: terraform

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          service_account: ${{ secrets.GCP_WIF_SA }}
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GCP_PROJECT_ID }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.GCP_PROJECT_ID }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.terraform.outputs.service_name }}/${{ needs.terraform.outputs.deployment_name }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-cloud-run:
    runs-on: ubuntu-latest
    needs: [ terraform, build_docker ]

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GCP_WIF_SA }}
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get Git SHA
        id: git_sha
        run: |
          LONG_SHA=$(git rev-parse HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "LONG_SHA=$LONG_SHA" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

      - name: Deploy from PR
        id: deploy-pr
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ needs.terraform.outputs.deployment_name }}
          image: ${{ needs.terraform.outputs.gcp_region }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.terraform.outputs.service_name }}/${{ needs.terraform.outputs.deployment_name }}:latest
          env_vars: ${{ needs.terraform.outputs.cloud_run_env }}
          # secrets: ${{ needs.terraform.outputs.cloud_run_secret_env }} # Removed this for now since I dont manage secrets
          tag: ${{ env.SHORT_SHA }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ needs.terraform.outputs.gcp_region }}
          flags: --no-allow-unauthenticated --memory=${{ needs.terraform.outputs.cloud_run_memory_limits }} --cpu=${{ needs.terraform.outputs.cloud_run_cpu_limits }} --max-instances=${{ needs.terraform.outputs.cloud_run_max_instances }} --concurrency=${{ needs.terraform.outputs.cloud_run_concurrency }}
